import logging

import asyncio
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.manage_bot_token, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
channels = []
words = []

admins_list = config.admin_chats_list


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddStates(StatesGroup):
    waiting_channel = State()
    waiting_word = State()


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_keyboard(items, prefix, back_handler):
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    for i in range(0, len(items), 2):
        row = items[i:i + 2]
        for item in row:
            builder.add(InlineKeyboardButton(
                text=item,
                callback_data=f"{prefix}-item-{item}"
            ))
        builder.adjust(2)

    # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    # if len(items) % 2 != 0:
    #     builder.row(InlineKeyboardButton(
    #         text=items[-1],
    #         callback_data=f"{prefix}_item_{items[-1]}"
    #     ), width=1)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_handler),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{prefix}-add")
    )
    return builder.as_markup()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def cmd_start(message: types.Message, back: None | types.CallbackQuery = None):
    if message.chat.id not in admins_list:
        print(message.chat.id)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text="üòî –£–π—Ç–∏", callback_data="leave")
        )
        await message.answer(
            f"üòî {html.bold('–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!')}\n{html.italic('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —Ç–æ—Ç, –∫–æ–≥–æ —è —Ç–∞–∫ –∂–¥—É...')}",
            reply_markup=keyboard.as_markup()
        )
        return
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª—ã", callback_data="channels"),
        InlineKeyboardButton(text="üìù –°–ª–æ–≤–∞", callback_data="words")
    )
    if back:
        await back.message.edit_text(
            f"‚öôÔ∏è {html.bold('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')}",
            reply_markup=keyboard.as_markup()
        )
    else:
        await message.answer(
            f"‚öôÔ∏è {html.bold('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')}",
            reply_markup=keyboard.as_markup()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–∞–Ω–∞–ª—ã
@dp.callback_query(F.data == "channels")
async def channels_list(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f"{html.bold('–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤')}\n{html.italic('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π') if channels else html.italic('–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –ø—É—Å—Ç–æ... –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª!')}",
        reply_markup=build_keyboard(channels, "channel", "main_menu")
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–ª–æ–≤–∞
@dp.callback_query(F.data == "words")
async def words_list(callback: types.CallbackQuery):
    await callback.message.edit_text(
        f"{html.bold('–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤')}\n{html.italic('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π') if words else html.italic('–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –ø—É—Å—Ç–æ... –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!')}",
        reply_markup=build_keyboard(words, "word", "main_menu")
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
@dp.callback_query(F.data.startswith(("channel-item-", "word-item-")))
async def handle_item(callback: types.CallbackQuery):
    prefix = "channel" if callback.data.startswith('channel') else "word"
    item = callback.data.split("-", maxsplit=2)[2]

    channel_url = item

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=(await (bot.get_chat("@" + item))).title if prefix == "channel" else item,
        url=f"t.me/{channel_url}" if prefix == "channel" else None,
        callback_data=f"dummy" if prefix == "word" else None,
    ), width=1)
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=prefix + "s"
    ), InlineKeyboardButton(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"{prefix}-delete-{item}"
    ), width=2)

    await callback.message.edit_text(
        f"{html.bold('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–º')}\n{html.italic('–í—ã, —á—Ç–æ, —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ?..')}",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith(("channel-delete-", "word-delete-")))
async def delete_item(callback: types.CallbackQuery):
    prefix = "channel" if "channel" in callback.data else "word"
    item = callback.data.split("-", maxsplit=2)[2]

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{prefix}-confirm-{item}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"{prefix}s")
    )
    await callback.message.edit_text(
        f"{html.bold(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ¬´{item}¬ª?')}\n{html.italic('–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.')}",
        reply_markup=builder.as_markup()
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith(("channel-confirm-", "word-confirm-")))
async def confirm_delete(callback: types.CallbackQuery):
    prefix = "channel" if "channel" in callback.data else "word"
    item = callback.data.split("-", maxsplit=2)[2]

    if prefix == "channel":
        channels.remove(item)
        await channels_list(callback)
    else:
        words.remove(item)
        await words_list(callback)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query(F.data.endswith("-add"))
async def add_item(callback: types.CallbackQuery, state: FSMContext):
    prefix = callback.data.split("-")[0]

    await state.set_state(AddStates.waiting_channel if prefix == "channel" else AddStates.waiting_word)
    await state.update_data(prefix=prefix)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"{prefix}s"
    ))

    await callback.message.edit_text(
        f"{html.bold('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞...')}\n{html.italic('–ö –ø—Ä–∏–º–µ—Ä—É, @amsu_online')}" if prefix == "channel" else
        f"{html.bold('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ...')}\n{html.italic('–ö –ø—Ä–∏–º–µ—Ä—É: –ø—Ä–æ–∏–≥—Ä–∞–ª ‚Äì –ø—Ä–æ–∏–≥—Ä–∞—Ç—å, –∑–æ–Ω—Ç–∏–∫–∏ ‚Äì –∑–æ–Ω—Ç–∏–∫')}",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(AddStates.waiting_channel)
@dp.message(AddStates.waiting_word)
async def process_item(message: types.Message, state: FSMContext):
    data = await state.get_data()
    prefix = data.get("prefix")
    item = message.text.lower()

    await (await bot.get_chat(message.chat.id)).delete_message(message.message_id - 1)

    channel_name = ''
    bad_request = False
    if prefix == "channel":
        if item.startswith("@"):
            item = item[1:]
        try:
            channel_name = (await (bot.get_chat("@" + item))).title
            channels.append(item)
        except Exception as e:
            bad_request = True
    else:
        words.append(item)

    if bad_request:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"{prefix}s"
        ), InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π",
            callback_data=f"{prefix}-add"
        ))
        await message.delete()
        await message.answer(
            f"{html.bold('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!')}\n{html.italic(f'–¢–µ–≥ @{item} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')}",
            reply_markup=builder.as_markup()
        )
        await state.clear()
    else:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"{prefix}s"
        ), InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë",
            callback_data=f"{prefix}-add"
        ))
        await message.answer(
            f"{html.bold('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')}\n{html.italic(f'–ö–∞–Ω–∞–ª ¬´{channel_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!')}" if prefix == 'channel' else
            f"{html.bold('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')}\n{html.italic(f'–°–ª–æ–≤–æ ¬´{item}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ!')}",
            reply_markup=builder.as_markup()
        )
        await state.clear()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    await cmd_start(callback.message, callback)


# –ö–Ω–æ–ø–∫–∞, —á—Ç–æ–±—ã —É–π—Ç–∏
@dp.callback_query(F.data == "leave")
async def leave_scene(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü–æ–∫–∞!")
    await (await bot.get_chat(callback.message.chat.id)).delete_message(callback.message.message_id - 1)
    await asyncio.sleep(2)
    await callback.message.delete()


if __name__ == "__main__":
    dp.run_polling(bot)
