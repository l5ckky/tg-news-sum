import datetime
import logging

import aiogram.exceptions
import os
import db

import asyncio
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaDocument, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.manage_bot_token, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
# channels = []
# words = []


# words = [i[0] for i in db.DB().select("SELECT * FROM words")]
# channels = [i[0] for i in db.DB().select("SELECT * FROM channels")]

def human_read_format(size):
    if size < 1024:
        return f"{size}–ë"
    elif size < 1024 * 1024:
        return f"{round(size / 1024)}–ö–ë"
    elif size < 1024 * 1024 * 1024:
        return f"{round(size / (1024 * 1024))}–ú–ë"
    else:
        return f"{round(size / (1024 * 1024 * 1024))}–ì–ë"


admins_list = config.admin_chats_list


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddStates(StatesGroup):
    waiting_channel = State()
    waiting_word = State()


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_keyboard(items, prefix, back_handler):
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    for i in range(0, len(items), 2):
        row = items[i:i + 2]
        for item in row:
            builder.add(InlineKeyboardButton(
                text=item,
                callback_data=f"{prefix}-item-{item}"
            ))
        builder.adjust(2)

    # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    # if len(items) % 2 != 0:
    #     builder.row(InlineKeyboardButton(
    #         text=items[-1],
    #         callback_data=f"{prefix}_item_{items[-1]}"
    #     ), width=1)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_handler),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{prefix}-add")
    )
    return builder.as_markup()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def cmd_start(message: types.Message, back: None | types.Message = None):
    if message.chat.id not in admins_list:
        print(message.chat.id)
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text="üòî –£–π—Ç–∏", callback_data="leave")
        )
        await message.answer(
            f"üòî {html.bold('–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!')}\n{html.italic('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —Ç–æ—Ç, –∫–æ–≥–æ —è —Ç–∞–∫ –∂–¥—É...')}",
            reply_markup=keyboard.as_markup()
        )
        return
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª—ã", callback_data="channels"),
        InlineKeyboardButton(text="üìù –°–ª–æ–≤–∞", callback_data="words"))
    keyboard.row(InlineKeyboardButton(text="üì° –õ–æ–≥–∏", callback_data="logs"))

    if back:
        domsg = back.edit_text
    else:
        domsg = message.answer

    await domsg(f"‚öôÔ∏è {html.bold('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')}",
                reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–∞–Ω–∞–ª—ã
@dp.callback_query(F.data == "channels")
async def channels_list(callback: types.CallbackQuery):
    channels = [i[0] for i in db.DB().select("SELECT * FROM channels")]
    await callback.message.edit_text(
        f"{html.bold('üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤')}\n{html.italic('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π') if channels else html.italic('–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –ø—É—Å—Ç–æ... –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª!')}",
        reply_markup=build_keyboard(channels, "channel", "main_menu")
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–ª–æ–≤–∞
@dp.callback_query(F.data == "words")
async def words_list(callback: types.CallbackQuery):
    words = [i[0] for i in db.DB().select("SELECT * FROM words")]
    await callback.message.edit_text(
        f"{html.bold('üìù –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤')}\n{html.italic('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π') if words else html.italic('–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –ø—É—Å—Ç–æ... –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!')}",
        reply_markup=build_keyboard(words, "word", "main_menu")
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
@dp.callback_query(F.data.startswith(("channel-item-", "word-item-")))
async def handle_item(callback: types.CallbackQuery):
    prefix = "channel" if callback.data.startswith('channel') else "word"
    item = callback.data.split("-", maxsplit=2)[2]

    channel_url = item

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=(await (bot.get_chat("@" + item))).title if prefix == "channel" else item,
        url=f"t.me/{channel_url}" if prefix == "channel" else None,
        callback_data=f"dummy" if prefix == "word" else None,
    ), width=1)
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=prefix + "s"
    ), InlineKeyboardButton(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"{prefix}-delete-{item}"
    ), width=2)

    await callback.message.edit_text(
        f"{html.bold('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–º')}\n{html.italic('–í—ã, —á—Ç–æ, —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ?..')}",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith(("channel-delete-", "word-delete-")))
async def delete_item(callback: types.CallbackQuery):
    prefix = "channel" if "channel" in callback.data else "word"
    item = callback.data.split("-", maxsplit=2)[2]

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{prefix}-confirm-{item}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"{prefix}s")
    )
    await callback.message.edit_text(
        f"{html.bold(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ¬´{item}¬ª?')}\n{html.italic('–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.')}",
        reply_markup=builder.as_markup()
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith(("channel-confirm-", "word-confirm-")))
async def confirm_delete(callback: types.CallbackQuery):
    prefix = "channel" if "channel" in callback.data else "word"
    item = callback.data.split("-", maxsplit=2)[2]
    try:
        if prefix == "channel":
            db.DB().delete("channels", [item])
            await channels_list(callback)
        else:
            db.DB().delete("words", [item])
            await words_list(callback)
    except Exception as e:
        await callback.message.answer(
            f"{html.bold('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö:')}\n{html.blockquote(e)}")
        await back_to_main(callback)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query(F.data.endswith("-add"))
async def add_item(callback: types.CallbackQuery, state: FSMContext):
    prefix = callback.data.split("-")[0]

    await state.set_state(AddStates.waiting_channel if prefix == "channel" else AddStates.waiting_word)
    await state.update_data(prefix=prefix)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"{prefix}s"
    ))

    await callback.message.edit_text(
        f"{html.bold('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞...')}\n{html.italic('–ö –ø—Ä–∏–º–µ—Ä—É, @amsu_online')}" if prefix == "channel" else
        f"{html.bold('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ...')}\n{html.italic('–ö –ø—Ä–∏–º–µ—Ä—É: –ø—Ä–æ–∏–≥—Ä–∞–ª ‚Äì –ø—Ä–æ–∏–≥—Ä–∞—Ç—å, –∑–æ–Ω—Ç–∏–∫–∏ ‚Äì –∑–æ–Ω—Ç–∏–∫')}",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(AddStates.waiting_channel)
@dp.message(AddStates.waiting_word)
async def process_item(message: types.Message, state: FSMContext):
    data = await state.get_data()
    prefix = data.get("prefix")
    item = message.text.lower()

    await bot.delete_message(message.chat.id, message.message_id - 1)

    channel_name = ''
    bad_request = False
    try:
        if prefix == "channel":
            try:
                if item.startswith("@"):
                    item = item[1:]
                channel_name = (await (bot.get_chat("@" + item))).title
                db.DB().insert("channels", [item])
            except aiogram.exceptions.TelegramBadRequest:
                bad_request = True
        else:
            db.DB().insert("words", [item])
    except Exception as e:
        await message.answer(
            f"{html.bold('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö:')}\n{html.blockquote(e)}")
        await cmd_start(message, message)

    if bad_request:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"{prefix}s"
        ), InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π",
            callback_data=f"{prefix}-add"))
        await message.delete()
        await message.answer(
            f"{html.bold('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!')}\n{html.italic(f'–¢–µ–≥ @{item} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')}",
            reply_markup=builder.as_markup()
        )
        await state.clear()
    else:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"{prefix}s"
        ), InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë",
            callback_data=f"{prefix}-add"
        ))
        await message.answer(
            f"{html.bold('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')}\n{html.italic(f'–ö–∞–Ω–∞–ª ¬´{channel_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!')}" if prefix == 'channel' else
            f"{html.bold('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')}\n{html.italic(f'–°–ª–æ–≤–æ ¬´{item}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ!')}",
            reply_markup=builder.as_markup()
        )
        await state.clear()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    await cmd_start(callback.message, callback.message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –õ–æ–≥–∏
@dp.callback_query(F.data == "logs")
async def logs_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="üóì –õ–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        callback_data='logs-log-today',
    ))
    builder.row(InlineKeyboardButton(
        text="üóì –õ–æ–≥ –∑–∞ –≤—á–µ—Ä–∞",
        callback_data='logs-log-yesterday',
    ))
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data='main_menu',
    ), InlineKeyboardButton(
        text="üóÇ –î—Ä—É–≥–æ–µ",
        callback_data='logs-other',
    )
        # , InlineKeyboardButton(
        # text=f"üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏ ({human_read_format(os.path.getsize("logs/main_log.log"))})",
        # callback_data='logs-download-main',)
    )
    try:
        await callback.message.edit_text(
            f"{html.bold('üì° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏')}\n{html.italic('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')}",
            reply_markup=builder.as_markup()
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer(
            f"{html.bold('üì° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏')}\n{html.italic('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')}",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data == "logs-other")
async def logs_menu_other(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data='logs',
    ), InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É",
        callback_data='logs-select-date',
    ))
    builder.row(InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫",
        callback_data='logs-select-lines',
    ))
    builder.row(InlineKeyboardButton(
        text=f"üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏ ({human_read_format(os.path.getsize('logs/main_log.log'))})",
        callback_data='logs-action-download-main'))
    builder.row()
    await callback.message.edit_text(
        f"{html.bold('üì° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏: –î—Ä—É–≥–æ–µ')}\n{html.italic('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...')}",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("logs-log-"))
async def logs_log(callback: types.CallbackQuery):
    pr = callback.data.split("-", maxsplit=2)[-1]

    if pr == 'today':
        day = datetime.datetime.today().date()
        day_word = '—Å–µ–≥–æ–¥–Ω—è'
    elif pr == 'yesterday':
        day = (datetime.datetime.today() - datetime.timedelta(days=1)).date()
        day_word = '–≤—á–µ—Ä–∞'
    else:
        day = datetime.datetime.strptime(pr, "%d_%m_%Y").date()
        day_word = day.strftime("%d.%m.%Y")

    count_lines = 0
    day_log = ''
    file = f"logs/daily/log_{day.strftime('%d_%m_%Y')}.log"
    if os.path.exists(file):
        day_log = file
        with open(day_log, 'r', encoding="utf-8") as f:
            count_lines = len(f.readlines())

    if not day_log:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="–ù–µ—Ç –ª–æ–≥–æ–≤",
            callback_data='dummy',
        ))
        builder.row(InlineKeyboardButton(
            text=f"‚¨ÖÔ∏è –ö –º–µ–Ω—é –ª–æ–≥–æ–≤",
            callback_data='logs',
        ))
        format = "%d.%m.%Y"
        await callback.message.edit_text(
            f"{html.bold(f'üì° –õ–æ–≥–∏ –∑–∞ {day_word} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')}\n{html.italic(f'{day.strftime(format)} –Ω–µ—Ç –ª–æ–≥–æ–≤!')}",
            reply_markup=builder.as_markup()
        )
        return

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=f"–ü—Ä–æ—Å–º–æ—Ç—Ä ({str(count_lines)} —Å—Ç—Ä–æ–∫)",
        callback_data=f'logs-action-show-{day_log}',
    ))
    builder.row(InlineKeyboardButton(
        text=f"–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª ({human_read_format(os.path.getsize(f'{day_log}'))})",
        callback_data=f'logs-action-download-{day_log}',
    ))
    builder.row(InlineKeyboardButton(
        text=f"‚¨ÖÔ∏è –ö –º–µ–Ω—é –ª–æ–≥–æ–≤",
        callback_data='logs'))
    a = f"({day.strftime('%d.%m.%Y')})"
    t = 'today'
    y = "yesterday"
    s = ''
    try:
        await callback.message.edit_text(
            f"{html.bold(f'üì° –õ–æ–≥ –∑–∞ {day_word} {a if pr in (t, y) else s}')}\n{html.italic('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...')}",
            reply_markup=builder.as_markup()
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer(
            f"{html.bold(f'üì° –õ–æ–≥ –∑–∞ {day_word} {a if pr in (t, y) else s}')}\n{html.italic('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...')}",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data == "logs-select-date")
async def logs_select_date(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
        callback_data='logs-select-date-calendar',
    ))
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data='logs-other',
    ), InlineKeyboardButton(
        text=f"–í—Ä—É—á–Ω—É—é",
        callback_data='logs-select-date-manual'))
    await callback.message.edit_text(
        f"{html.bold('üì° –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏: –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É')}\n{html.italic('üõ† –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')}",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("logs-action-"))
async def logs_actions(callback: types.CallbackQuery):
    pr = callback.data.split("-", maxsplit=3)[2]
    r = "reload" in callback.data.split(":", maxsplit=1)
    file = callback.data.split("-", maxsplit=3)[3] if not r else callback.data.split("-", maxsplit=3)[3].split(':')[0]

    if file == "main":
        file = "logs/main_log.log"
        day = None
    else:
        day = datetime.datetime.strptime(file.split("/")[-1].split(".")[0].split("_", maxsplit=1)[1], "%d_%m_%Y").date()

    if pr == 'download':
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"logs{('-log-' + day.strftime('%d_%m_%Y')) if day else ''}",
        ))
        media = FSInputFile(file)
        await callback.message.edit_media(InputMediaDocument(media=media), reply_markup=builder.as_markup())
    elif pr == 'show':
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"logs{('-log-' + day.strftime('%d_%m_%Y')) if day else ''}",
        ), InlineKeyboardButton(
            text="–û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=callback.data + (":reload" if not r else ''),
        ))
        with open(file, 'r', encoding="utf-8") as f:
            lines = [i.strip() for i in f.readlines()]
            log = '\n\n'.join(lines)
            msg = (callback.message.html_text if not r else "\n".join(
                callback.message.html_text.split('\n', maxsplit=2)[:2])) + f"\n{html.expandable_blockquote(log)}"
            if len(msg) > 4096:
                builder.row(InlineKeyboardButton(
                    text=f"–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª ({human_read_format(os.path.getsize(f'{file}'))})",
                    callback_data=f'logs-action-download-{file}',
                ))
                a = '\n\n'
                msg = (callback.message.html_text if not r else "\n".join(
                    callback.message.html_text.split('\n', maxsplit=2)[
                    :2])) + f"\n{html.blockquote(a.join(lines[-5:]))}\n{html.italic('–í—ã–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫. –ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –≤—Å–µ–≥–æ –ª–æ–≥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ...')}"
        try:
            await callback.message.edit_text(msg, reply_markup=builder.as_markup())
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" in e.message:
                await callback.answer()


@dp.callback_query(F.data == "dummy")
async def dummy(callback: types.CallbackQuery):
    await callback.answer()


# –ö–Ω–æ–ø–∫–∞, —á—Ç–æ–±—ã —É–π—Ç–∏
@dp.callback_query(F.data == "leave")
async def leave_scene(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü–æ–∫–∞!")
    await (await bot.get_chat(callback.message.chat.id)).delete_message(callback.message.message_id - 1)
    await asyncio.sleep(2)
    await callback.message.delete()


if __name__ == "__main__":
    dp.run_polling(bot)
